//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteOperaciones.Servicios {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Servicios.WSOperacionesSoap")]
    public interface WSOperacionesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        int Sumar(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> SumarAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        int Restar(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> RestarAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        int Multiplicar(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> MultiplicarAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        int Dividir(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        System.Threading.Tasks.Task<int> DividirAsync(int A, int B);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WSOperacionesSoapChannel : ClienteOperaciones.Servicios.WSOperacionesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WSOperacionesSoapClient : System.ServiceModel.ClientBase<ClienteOperaciones.Servicios.WSOperacionesSoap>, ClienteOperaciones.Servicios.WSOperacionesSoap {
        
        public WSOperacionesSoapClient() {
        }
        
        public WSOperacionesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WSOperacionesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSOperacionesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSOperacionesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Sumar(int A, int B) {
            return base.Channel.Sumar(A, B);
        }
        
        public System.Threading.Tasks.Task<int> SumarAsync(int A, int B) {
            return base.Channel.SumarAsync(A, B);
        }
        
        public int Restar(int A, int B) {
            return base.Channel.Restar(A, B);
        }
        
        public System.Threading.Tasks.Task<int> RestarAsync(int A, int B) {
            return base.Channel.RestarAsync(A, B);
        }
        
        public int Multiplicar(int A, int B) {
            return base.Channel.Multiplicar(A, B);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicarAsync(int A, int B) {
            return base.Channel.MultiplicarAsync(A, B);
        }
        
        public int Dividir(int A, int B) {
            return base.Channel.Dividir(A, B);
        }
        
        public System.Threading.Tasks.Task<int> DividirAsync(int A, int B) {
            return base.Channel.DividirAsync(A, B);
        }
    }
}
